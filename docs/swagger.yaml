basePath: /api
definitions:
  controllers.UserController:
    type: object
  models.EmailUpdate:
    description: 用户邮箱更新请求参数
    properties:
      email:
        example: new_email@example.com
        type: string
    required:
    - email
    type: object
  models.LoginRequest:
    properties:
      email:
        example: zhangsan@example.com
        type: string
      password:
        example: "123456"
        type: string
    required:
    - email
    - password
    type: object
  models.PasswordChangeRequest:
    properties:
      newPassword:
        example: "654321"
        minLength: 6
        type: string
      oldPassword:
        example: "123456"
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: zhangsan@example.com
        type: string
      password:
        example: "123456"
        minLength: 6
        type: string
      username:
        example: 张三
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Response:
    properties:
      data: {}
      error:
        example: 参数错误
        type: string
      message:
        example: 操作成功
        type: string
    type: object
  models.TokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.User:
    description: 用户信息
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      message:
        example: 操作成功
        type: string
      user:
        type: object
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: 用户管理系统 API 文档
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go App API
  version: "1.0"
paths:
  /api:
    post:
      consumes:
      - application/json
      description: 配置所有API路由和中间件
      parameters:
      - description: 用户控制器
        in: body
        name: userController
        required: true
        schema:
          $ref: '#/definitions/controllers.UserController'
      produces:
      - application/json
      responses: {}
      summary: 设置API路由
      tags:
      - 系统
  /api/users/logout:
    post:
      consumes:
      - application/json
      description: 用户退出登录
      produces:
      - application/json
      responses:
        "200":
          description: 退出成功
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: 服务器错误
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 用户退出
      tags:
      - 用户管理
  /api/users/password:
    post:
      consumes:
      - application/json
      description: 用户修改自己的密码
      parameters:
      - description: 用户令牌
        in: header
        name: Authorization
        required: true
        type: string
      - description: 密码修改请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PasswordChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/models.Response'
      summary: 修改用户密码
      tags:
      - 用户管理
  /login:
    post:
      consumes:
      - application/json
      description: 用户登录并获取token
      parameters:
      - description: 用户登录信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
      summary: 用户登录
      tags:
      - 用户管理
  /register:
    post:
      consumes:
      - application/json
      description: 创建新用户
      parameters:
      - description: 用户注册信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: 用户注册
      tags:
      - 用户管理
  /users:
    get:
      description: 获取所有用户信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户列表
      tags:
      - 用户管理
  /users/{id}:
    get:
      description: 根据ID获取用户信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个用户
      tags:
      - 用户管理
    post:
      consumes:
      - application/json
      description: 更新用户基本信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 更新用户信息
      tags:
      - 用户管理
  /users/{id}/delete:
    post:
      description: 根据ID删除用户
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - 用户管理
  /users/{id}/email:
    post:
      consumes:
      - application/json
      description: 更新指定用户的邮箱地址
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 新邮箱
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.EmailUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 更新用户邮箱
      tags:
      - 用户管理
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
