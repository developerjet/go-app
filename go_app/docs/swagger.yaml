basePath: /api
definitions:
  controllers.UserController:
    type: object
  models.EmailUpdateRequest:
    properties:
      email:
        example: newemail@example.com
        type: string
      userId:
        example: 1
        type: integer
    required:
    - email
    - userId
    type: object
  models.LoginRequest:
    properties:
      email:
        example: zhangsan@example.com
        type: string
      password:
        example: "123456"
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    description: 用户登录成功响应
    properties:
      userInfo:
        $ref: '#/definitions/models.UserInfo'
    type: object
  models.PasswordChangeRequest:
    properties:
      newPassword:
        example: "654321"
        minLength: 6
        type: string
      oldPassword:
        example: "123456"
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: zhangsan@example.com
        type: string
      password:
        example: "123456"
        minLength: 6
        type: string
      username:
        example: 张三
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Response:
    description: API 统一响应格式
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      timestamp:
        example: 1704067200
        type: integer
    type: object
  models.UserIDRequest:
    properties:
      userId:
        example: 1
        type: integer
    required:
    - userId
    type: object
  models.UserInfo:
    description: 用户详细信息响应结构
    properties:
      avatarUrl:
        example: https://example.com/avatar.jpg
        type: string
      birthday:
        example: "1990-01-01T00:00:00+08:00"
        type: string
      createdAt:
        example: "2024-01-01T00:00:00+08:00"
        type: string
      email:
        example: zhangsan@example.com
        type: string
      gender:
        enum:
        - male
        - female
        - other
        example: male
        type: string
      hobbies:
        example: 读书,游泳,旅行
        type: string
      updatedAt:
        example: "2024-01-01T00:00:00+08:00"
        type: string
      userId:
        example: 1
        type: integer
      username:
        example: 张三
        type: string
    type: object
  models.UserPageResponse:
    description: 用户分页列表响应结构
    properties:
      list:
        items:
          $ref: '#/definitions/models.UserInfo'
        type: array
      page:
        example: 1
        minimum: 1
        type: integer
      pageSize:
        example: 10
        maximum: 100
        minimum: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: 用户管理系统 API 文档
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go App API
  version: "1.0"
paths:
  /api:
    post:
      consumes:
      - application/json
      description: 配置所有API路由和中间件
      parameters:
      - description: 用户控制器
        in: body
        name: userController
        required: true
        schema:
          $ref: '#/definitions/controllers.UserController'
      produces:
      - application/json
      responses: {}
      summary: 设置API路由
      tags:
      - 系统
  /api/login:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: 用户登录并获取token，同一用户重复登录会使之前的token失效
      parameters:
      - description: 用户登录信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 登录成功
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.LoginResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/models.Response'
        "1000":
          description: 用户不存在
          schema:
            $ref: '#/definitions/models.Response'
        "1001":
          description: 密码错误
          schema:
            $ref: '#/definitions/models.Response'
      summary: 用户登录
      tags:
      - 用户管理
  /api/register:
    post:
      consumes:
      - application/json
      description: 新用户注册，支持设置性别等基本信息
      parameters:
      - description: 用户注册信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 注册成功
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "409":
          description: 邮箱已被注册
          schema:
            $ref: '#/definitions/models.Response'
      summary: 用户注册
      tags:
      - 用户管理
  /api/users:
    get:
      consumes:
      - application/json
      description: 获取用户列表，支持分页查询
      parameters:
      - default: 1
        description: 页码(从1开始)
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserPageResponse'
              type: object
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户列表
      tags:
      - 用户管理
  /api/users/avatar:
    post:
      consumes:
      - multipart/form-data
      description: 上传并更新用户头像
      parameters:
      - description: 用户ID
        in: formData
        name: userId
        required: true
        type: integer
      - description: 头像文件（支持jpg、jpeg、png、gif，最大10MB）
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 上传成功，返回头像URL
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 上传用户头像
      tags:
      - 用户管理
  /api/users/delete:
    post:
      consumes:
      - application/json
      description: 删除指定用户
      parameters:
      - description: 用户ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserIDRequest'
      - description: 用户ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: 用户不存在
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - 用户管理
  /api/users/email:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: 更新用户邮箱
      parameters:
      - description: 更新邮箱信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EmailUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "409":
          description: 邮箱已被使用
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 更新邮箱
      tags:
      - 用户管理
  /api/users/info:
    get:
      consumes:
      - application/json
      description: 获取指定用户的详细信息
      parameters:
      - description: 用户ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: 用户不存在
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户信息
      tags:
      - 用户管理
  /api/users/logout:
    post:
      consumes:
      - application/json
      description: 用户退出登录
      produces:
      - application/json
      responses:
        "200":
          description: 退出成功
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 用户退出
      tags:
      - 用户管理
  /api/users/password:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: 用户修改密码
      parameters:
      - description: 修改密码信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PasswordChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 密码修改成功
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: 修改密码
      tags:
      - 用户管理
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
